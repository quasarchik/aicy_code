from utils.config import ADMIN_ID
from pyrogram import errors, filters, Client, types
from utils import texts, util, log_bot
from database import DatabaseManager

def register_all_admin_handlers(app: Client, db: DatabaseManager, log_warn):

    @app.on_message(filters.command(['set'], prefixes=["/", "!", ".", '']))
    async def set_admin(_, msg):
        await util.check_user(db, msg)
        await log_bot(msg)

        if str(msg.from_user.id) != ADMIN_ID:
            return -1

        text = " ".join(msg.text.split(' ')[1:])
        text = text.split(' ')

        if len(text) < 4:
            await msg.reply_text("–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return

        table, how, column, value, *args = text
        if how == 'all':
            # Update all rows in the specified column
            if len(text) == 4:
                table, how, column, value = text
                if value == 'null':
                    value = None
                data = {column: value}
                db.update_data(table, '1=1', (), **data)  # '1=1' is a tautology that matches all rows
                await msg.reply_text(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ '{column}' –Ω–∞ '{value}' –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ '{table}'")
            else:
                await msg.reply_text("–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '/set <table> all <column> <value>'")
        else:
            if len(text) == 5:
                how, who, what, value = text[1:]
                data = {what: value}
                db.update_data(table, f'{how} = ?', (who,), **data)
                await msg.reply_text("—Å—Ç—Ä–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞\n" + "\n".join(f"{key} : {value}" for key, value in data.items()))
            else:
                await msg.reply_text("–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '/set <table> <how> <who> <what> <value>'")

    @app.on_message(filters.command(['del'], prefixes=["/", "!", ".", '']))
    async def del_admin(_, msg):
        await util.check_user(db, msg)
        await log_bot(msg)

        if str(msg.from_user.id) != ADMIN_ID:
            return -1

        text = " ".join(msg.text.split(' ')[1:])
        text = text.split(' ')

        if len(text) == 3:
            table, how, who = text
            db.delete_data(table, f'{how} = ?', (who,))
            await msg.reply_text("—Å—Ç—Ä–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞\n" + " ".join([table, how, who]))
        else:
            await msg.reply_text("–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")

    @app.on_message(filters.command(['id'], prefixes=["/", "!", ".", '']))
    async def id_admin(_, msg):
        await util.check_user(db, msg)
        await log_bot(msg)

        if str(msg.from_user.id) != ADMIN_ID:
            return -1

        text = texts.get_info_chat(msg)
        await msg.reply_text(text)

    @app.on_message(filters.private & filters.command(['–∞–Ω–æ–Ω—Å'], prefixes=["."]))
    async def anonses(client, msg):
        await util.check_user(db, msg)
        await log_bot(msg)

        if str(msg.from_user.id) != ADMIN_ID:
            return -1

        # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        parts = msg.text.split('\n')
        if len(parts) < 3:
            return
        chat_id = parts[1] if parts[1].lower() != 'all' else None  # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        text = "\n".join(parts[2:]) if len(parts) > 2 else "\n".join(parts[1:])  # –°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

        users = db.fetch_data('users')
        groups = db.fetch_data('groups')

        msg_text = f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ {len(groups)} –≥—Ä—É–ø–ø–∞–º!"
        message = await msg.reply_text(msg_text)

        if chat_id:  # –ï—Å–ª–∏ chat_id —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –Ω–µ–≥–æ
            try:
                await client.send_message(chat_id, text)
                msg_text += f"\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç —Å ID {chat_id}!"
            except Exception as e:
                msg_text += f"\n\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç —Å ID {chat_id}: {e}"
        else:  # –ï—Å–ª–∏ chat_id –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –≥—Ä—É–ø–ø–∞–º
            c = 0
            for user in users:
                try:
                    chat = await client.get_chat(user['id'])
                    if user['id'] != int(ADMIN_ID):
                        await client.send_message(user['id'], text)
                        c += 1
                except:
                    pass
            msg_text += f"\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {c} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!"
            
            c = 0
            for group in groups:
                try:
                    chat = await client.get_chat(group['id'])
                    await client.send_message(group['id'], text)
                    c += 1
                except:
                    pass
            msg_text += f"\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {c} –≥—Ä—É–ø–ø–∞–º!"

        await message.edit_text(msg_text)
        
    @app.on_message(filters.private & filters.command(['data'], prefixes=["."]))
    async def request_database(client, msg):
        await util.check_user(db, msg)
        await log_bot(msg)

        if str(msg.from_user.id) != ADMIN_ID:
            return -1

        message = await client.send_message(
            chat_id=msg.chat.id,
            text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –∑–∞–≥—Ä—É–∂–∞—é –¥–æ–∫—É–º–µ–Ω—Ç... ‚è≥"
        )

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        file_path = "aicy.db"
        await client.send_document(
            chat_id=msg.chat.id,  # ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª
            document=file_path,       # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            caption="–í–æ—Ç –≤–∞—à —Ñ–∞–π–ª üìÑ",  # –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É
        )
        await client.delete_messages(
            chat_id=msg.chat.id,
            message_ids=message.id
        )
     
    @app.on_message(filters.private & filters.command(['logs'], prefixes=["."]))
    async def request_logs(client, msg):
        await util.check_user(db, msg)
        await log_bot(msg)

        if str(msg.from_user.id) != ADMIN_ID:
            return -1
        message = await client.send_message(
            chat_id=msg.chat.id,
            text="–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –∑–∞–≥—Ä—É–∂–∞—é –¥–æ–∫—É–º–µ–Ω—Ç... ‚è≥"
        )

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        file_path = "aicy.log"
        await client.send_document(
            chat_id=msg.chat.id,  # ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª
            document=file_path,       # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            caption="–í–æ—Ç –≤–∞—à —Ñ–∞–π–ª üìÑ",  # –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É
        )
        await client.delete_messages(
            chat_id=msg.chat.id,
            message_ids=message.id
        )
    