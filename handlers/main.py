from .admin import register_all_admin_handlers
from .query import register_all_query_handlers
from .modules import register_all_module_handlers
from .profile import register_all_profile_handlers
from .groups import register_all_group_handlers
from .models import register_all_ai_handlers

from keyboards import inlines, keyboards
from utils import texts
from utils import util
from database import DatabaseManager

from pyrogram import enums, Client, filters


import os
import asyncio
import cv2
import numpy as np
import io
import ast
from datetime import timedelta, datetime
import sympy as sp
from random import choice, randint
import re



def register_all_handlers(app: Client, db: DatabaseManager, log_bot, log_warn):
    register_all_admin_handlers(app, db, log_bot, log_warn)
    register_all_query_handlers(app, db, log_bot, log_warn)
    register_all_module_handlers(app, db, log_bot, log_warn)
    register_all_profile_handlers(app, db, log_bot, log_warn)
    register_all_group_handlers(app, db, log_bot, log_warn)
    register_all_ai_handlers(app, db, log_bot, log_warn)

    @app.on_message(filters.command(['start']) & ~filters.private)
    async def start_group(_, msg):
        await util.check_user(db, msg)
        await util.check_group(db, msg)

        async for m in app.get_chat_members(msg.chat.id, filter=enums.ChatMembersFilter.RECENT):
            await util.check_user_id(db, m)

        log_bot(msg)
        await app.send_sticker(
            chat_id=msg.chat.id,  # ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
            sticker=texts.stickers[choice(['bang', 'love', 'socutie', 'dance', 'cutie', ])],
            protect_content=True
        )       
        await msg.reply_text(texts.greeting_group)
    

    @app.on_message(filters.command(['start']) & filters.private)
    async def start_private(_, msg):
        user = await util.check_user(db, msg)
        log_bot(msg)

        await app.send_sticker(
            chat_id=msg.chat.id,  # ID —á–∞—Ç–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
            sticker=texts.stickers[choice(['bang', 'love', 'socutie', 'dance', 'cutie'])],
            protect_content=True
        )
        
        await msg.reply_text(
            texts.greeting_private,
            reply_markup=keyboards.menu_kb
        )
    @app.on_message(filters.command(['–º–µ–Ω—é', 'menu'], prefixes=['', '/', '.']) & filters.private)
    async def menu(_, msg):
        user = await util.check_user(db, msg)
        log_bot(msg)
        
        await msg.reply_text('–ó–∞–≥—Ä—É–∂–∞—é –º–µ–Ω—é..üìç',
            reply_markup=keyboards.menu_kb
        )
    
    @app.on_message(~filters.private & filters.command(['–∞–π—Å–∏', '–∞–π—Å–æ—á–∫–∞'], prefixes=['!', '', '/', '.']))
    async def aicy_handler(_, msg):
        await util.check_user(db, msg)
        await util.check_group(db, msg)
        log_bot(msg)
        
        if not msg.text:
            return

        text = " ".join(msg.text.split(' ')[1:]).strip().lower()

        if text.startswith(('–∫—Ç–æ', '–∫–æ–≥–æ', '–∫–æ–º—É')):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Ç–∏–ø–∞ "–∞–π—Å–∏ –∫—Ç–æ", "–∞–π—Å–∏ –∫–æ–≥–æ", "–∞–π—Å–∏ –∫–æ–º—É" –∏ —Ç.–¥.
            await util.handle_who_command(app, msg, text, db)

        elif text.startswith(('—à–∞–Ω—Å', '–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Ç–∏–ø–∞ "–∞–π—Å–∏ —à–∞–Ω—Å", "–∞–π—Å–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å" –∏ —Ç.–¥.
            await util.handle_chance_command(app, msg, text, db)

        elif text.startswith(('–¥–∞–Ω–µ—Ç', '–¥–∞ –∏–ª–∏ –Ω–µ—Ç', '–æ—Ç–≤–µ—Ç—å')):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Ç–∏–ø–∞ "–∞–π—Å–∏ –¥–∞–Ω–µ—Ç", "–∞–π—Å–∏ –¥–∞ –∏–ª–∏ –Ω–µ—Ç", "–∞–π—Å–∏ –æ—Ç–≤–µ—Ç—å" –∏ —Ç.–¥.
            await util.handle_yes_no_command(app, msg, text, db)
        elif text.startswith(('—Å–∫–∞–∂–∏')):
            text = " ".join(text.split(' ')[1:]).strip().lower()
            await msg.reply_text(f'–ú–µ–Ω—è –ø–æ–ø—Ä–æ—Å–∏–ª–∏ —Å–∫–∞–∑–∞—Ç—å: {text}')
        elif text.startswith(('–∞–ª–≥', '–∞–ª–≥–µ–±—Ä–∞')):
            text = " ".join(text.split(' ')[1:]).strip().lower()
            x, y = sp.symbols('x y')
            if text.startswith(('—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å')):
                expr_str = " ".join(text.split(' ')[1:]).strip().lower()
                expr = sp.sympify(expr_str)
                res = sp.expand(expr)
                res = util.format_expression(res)
                await msg.reply_text(f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {res}')
            elif text.startswith(('—É–ø—Ä–æ—Å—Ç–∏—Ç—å')):
                expr_str = " ".join(text.split(' ')[1:]).strip().lower()
                expr = sp.sympify(expr_str)
                res = sp.factor(expr)
                res = util.format_expression(res)
                await msg.reply_text(f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {res}')
            elif text.startswith(('—Ä–µ—à–∏—Ç—å')):
                expr_str = " ".join(text.split(' ')[1:]).strip().lower()
                lhs_str, rhs_str = expr_str.split('=')
                rhs_str = rhs_str.strip()  # Remove any leading/trailing whitespace

                # Convert the left-hand side and right-hand side to SymPy expressions
                lhs = sp.parse_expr(lhs_str)
                rhs = sp.parse_expr(rhs_str)

                expr = sp.Eq(lhs, rhs)

                res = sp.solve(expr, x)
                res = util.format_expression(res)
                await msg.reply_text(f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {res}')
            elif text.startswith(('–¥–∏—Ñ—Ñ')):
                expr_str = " ".join(text.split(' ')[1:]).strip().lower()
                expr = sp.sympify(expr_str)
                res = sp.diff(expr, x)
                await msg.reply_text(f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {res}')
            elif text.startswith(('–∏—Ç–µ–≥—Ä')):
                expr_str = " ".join(text.split(' ')[1:]).strip().lower()
                expr = sp.sympify(expr_str)
                res = sp.integrate(expr, x)
                res = util.format_expression(res)
                await msg.reply_text(f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {res}')

        
    @app.on_message(~filters.private & filters.command(['—à–∏–ø', '–ø–µ–π—Ä–∏–Ω–≥'], prefixes=['!', '', '/', '.', "–∞–π—Å–∏ ", "–∞–π—Å–æ—á–∫–∞ "]))
    async def pairing_handler(_, msg):
        await util.check_user(db, msg)
        await util.check_group(db, msg)
        log_bot(msg)
        users = db.find_by_column('users', 'id', msg.from_user.id)
        if users:
            user = users[0]
            name = util.get_user_name(user)
            timers = ast.literal_eval(user['timers'])
            cur_timer = timers.get('pairing')
            current_date = datetime.now()
            
            if cur_timer:
                last_date = datetime.strptime(cur_timer, '%Y-%m-%d %H:%M:%S')
                cooldown_duration = timedelta(seconds=60)
                if current_date < last_date + cooldown_duration:
                    remaining_time = last_date + cooldown_duration - current_date
                    _, remainder = divmod(remaining_time.seconds, 3600)
                    _, seconds = divmod(remainder, 60)
                    await msg.reply_text(texts.msg_pairing_not_get(name, seconds))
                    return
            

            timers['pairing'] = current_date.strftime('%Y-%m-%d %H:%M:%S')
            db.update_data('users', 'id = ?', (user['id'],), **{'timers': str(timers)})

            await util.handle_pair_command(app, msg, db, texts)

    @app.on_message(~filters.private & filters.command(['—Ç–æ–ø'], prefixes=['!', '/', '.']))
    async def top_chat(client, msg):
        await util.check_user(db, msg)
        group = db.find_by_column('groups', 'id', msg.chat.id)
        if group:
            group = group[0]
            stats = ast.literal_eval(group[0]['stat'])
            stats = dict(sorted(stats.items(), key=lambda item: item[1]))
            c = 1
            for key, value in stats.items():
                user = db.find_by_column('users', 'id', key)[0]
                text += f"{c}. {util.get_user_name(user)} ‚Äî {value}"



    @app.on_message(~filters.private & filters.command(['–º—É–ª—å—Ç'], prefixes=['!', '', '/', '.']) & filters.photo)
    async def mult_filter(client, msg):
        await util.check_user(db, msg)
        now = datetime.now()
        users = db.find_by_column('users', 'id', msg.from_user.id)
        user = users[0]
        # Check for timer
        timers = ast.literal_eval(user['timers'])
        timer = timers.get('multi')
        if timer:
            time_diff = now - datetime.fromisoformat(timer)
            cooldown = timedelta(seconds=60)
            if time_diff < cooldown:
                remaining_time = cooldown - time_diff
                await msg.reply_text(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ! –ï—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ {remaining_time.seconds} —Å–µ–∫—É–Ω–¥.")
                return

        await util.check_group(db, msg)
        log_bot(msg)

        # Update timer
        timers['multi'] = now.isoformat()
        db.update_data('users', 'id = ?', (msg.from_user.id,), timers=str(timers))  # Update the database with the new timer

        nsamples = 1
        nbilateral = 7

        photo_file = await msg.download()
        img_rgb = cv2.imread(photo_file)
        cartoonizer = util.Cartoonizer(numDownSamples=nsamples, numBilateralFilters=nbilateral)
        cartoon_image = cartoonizer.render(img_rgb)
        _, buffer = cv2.imencode('.jpg', cartoon_image)
        img_bytes = buffer.tobytes()
        with io.BytesIO(img_bytes) as photo:
            await msg.reply_photo(photo)

        os.remove(photo_file)

    # Define individual handler functions
    async def handle_anketa(_, msg):
        user = db.find_by_column('users', 'id', msg.from_user.id)
        if user:
            user = user[0]
            name = util.get_user_name(user)
            age = user['age']
            city = user['city']
            birthdate = user['birthdate']
            when_added = user['when_added']
            vip = user['vip']
            relationship = user['relationship']

            text  = f"–ê–Ω–∫–µ—Ç–∞ {name}:\n"
            text += f"–ì–æ—Ä–æ–¥: {city if city else '–ù–µ —É–∫–∞–∑–∞–Ω('}:\n"
            text += f"–î–†: {birthdate if birthdate else '–ù–µ —É–∫–∞–∑–∞–Ω'} ({age} –ª–µ—Ç)\n"
            text += f"–ö–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω: {when_added}\n"
            text += f"–í–∏–ø–∫–∞: {vip if vip else '–ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª –≤–∏–ø–∫—É'}\n"
            text += f"–û—Ç–Ω–æ—à–µ–Ω–∏—è: {relationship if relationship != '{}' else '–ù–µ—Ç—É'}\n" 

            if msg.chat.id > 0:
                photos = []
                async for photo in app.get_chat_photos(msg.chat.id):
                    photos.append(photo)
                    break

                if len(photos) > 0:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
                    photo = photos[0]

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await app.send_photo(chat_id=msg.chat.id, photo=photo.file_id, caption=text)
                else:
                    await app.send_photo(chat_id=msg.chat.id, photo=f'https://picsum.photos/seed/{msg.from_user.id}/600/?blur', caption=text)
            else:
                await app.send_photo(chat_id=msg.chat.id, photo=f'https://picsum.photos/seed/{msg.from_user.id}/600/?blur', caption=text)

    async def handle_komandy(_, msg):
        url = 'https://teletype.in/@aicy_docs/aicy_08_08_24'
        await app.send_message(msg.chat.id, f'–ö–æ–º–∞–Ω–¥—ã AICY | Amethyst Light\n{url}')

    async def handle_razrabotchik(_, msg):
        # Implement the handler logic here
        pass

    async def handle_rp_komandy(_, msg):
        user = db.find_by_column('users', 'id', msg.from_user.id)
        if user:
            user = user[0]
            name = util.get_user_name(user)
            text = f"{name},\n\n–†–æ–ª–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–∞—Ö (–†–ü) –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –∏–≥—Ä–æ–∫–∞.\n"
            text += "–û–Ω–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–≥—Ä—ã –æ–ø–∏—Å—ã–≤–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–µ–ª–∞–µ—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏, –¥–æ–±–∞–≤–ª—è—è –±–æ–ª—å—à–µ –∂–∏–≤–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫ –∏–≥—Ä–µ.\n\n"
            text += "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
            text += "  <i>*–æ–±–Ω—è—Ç—å*</i>\n"
            text += "  <i>*–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å*</i>\n"
            text += "  <i>*–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–Ω—è—Ç–∏—è–º*</i>\n"
            text += "\n–†–ü-–ö–æ–º–∞–Ω–¥ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ!) –°–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤—Å–µ?"

            await msg.reply_text(text)



    async def handle_ivent(_, msg):
        # Implement the handler logic here
        pass

    async def handle_hab_bota(_, msg):
        # Implement the handler logic here
        pass

    async def handle_balans(_, msg):
        # Implement the handler logic here
        pass


    @app.on_message(filters.command(['—Å–æ–≤–º—ã'], prefixes=['!', '', '/', '.']) & filters.reply)
    async def birthdate_sovm(client, msg):
        await util.check_user(db, msg)
        log_bot(msg)
        

        user1 = db.find_by_column('users', 'id', msg.from_user.id)
        user2 = db.find_by_column('users', 'id', msg.reply_to_message.from_user.id)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

        if user1 and user2:
            user1 = user1[0]
            user2 = user2[0]

            gender1, birthdate1 = user1['gender'], user1['birthdate']
            gender2, birthdate2 = user2['gender'], user2['birthdate']

            name1 = util.get_user_name(user1)
            name2 = util.get_user_name(user2)

            response = ''
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–µ–Ω–¥–µ—Ä–æ–≤
            if not gender1:
                response += f"{name1}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª!\n"
            if not gender2:
                response += f"{name2}, –Ω–µ —É–∫–∞–∑–∞–ª –ø–æ–ª(\n"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
            if not birthdate1:
                response += f"{name1}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
            if not birthdate2:
                response += f"{name2}, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –¥—Ä(\n"

            if response:
                await msg.reply_text(response)
                return
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–µ–Ω–¥–µ—Ä–æ–≤
            match1 = re.search(r'\((.*?)\)', gender1)
            match2 = re.search(r'\((.*?)\)', gender2)

            if match1 and match2:
                gender_value1 = match1.group(1)
                gender_value2 = match2.group(1)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –ø–∞—Ä–µ–Ω—å, –∞ –∫—Ç–æ –¥–µ–≤—É—à–∫–∞
                if gender_value1 == "–ú":
                    user1_gender = "–ú"
                elif gender_value1 == "–î":
                    user1_gender = "–î"

                if gender_value2 == "–ú":
                    user2_gender = "–ú"
                elif gender_value2 == "–î":
                    user2_gender = "–î"

                if user1_gender == user2_gender:
                    user2_gender = "–î"
                    man_birthdate = birthdate1
                    woman_birthdate = birthdate2
                else:
                    if user1_gender == "–ú":
                        man_birthdate = birthdate1
                        woman_birthdate = birthdate2
                    else:
                        man_birthdate = birthdate2
                        woman_birthdate = birthdate1

                man_birthdate = f"{int(man_birthdate[8:10])}.{int(man_birthdate[5:7])}.{man_birthdate[:4]}"
                woman_birthdate = f"{int(woman_birthdate[8:10])}.{int(woman_birthdate[5:7])}.{woman_birthdate[:4]}"
                result = await util.sovms(man_birthdate, woman_birthdate)
                reply_text = f"–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è {name1} –∏ {name2}{texts.random_love_emoji()}\n\n{result}"
                await msg.reply_text(reply_text)

            else:
                await msg.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–µ–Ω–¥–µ—Ä –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        else:
            await msg.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


# Main handler
    @app.on_message(filters.text)
    async def main_handler(client, msg):
        await util.check_user(db, msg)
        log_bot(msg)

        # Check for specific commands and call the respective handler
        if msg.text in ["–ê–Ω–∫–µ—Ç–∞üå∏", "–∞–Ω–∫–µ—Ç–∞", "–∞–Ω–∫–µ—Ç–∞", ".–∞–Ω–∫–µ—Ç–∞", "/–∞–Ω–∫–µ—Ç–∞"]:
            await handle_anketa(client, msg)
        elif msg.text in ["–ö–æ–º–∞–Ω–¥—ãüç≠", "–ö–æ–º–∞–Ω–¥—ã", "–∫–æ–º–∞–Ω–¥—ã", ".–∫–æ–º–∞–Ω–¥—ã", "/–∫–æ–º–∞–Ω–¥—ã"]:
            await handle_komandy(client, msg)
        elif msg.text in ["–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫üèµ"] and msg.chat.id < 0:
            await handle_razrabotchik(client, msg)
        elif msg.text in ["–†–ü-–∫–æ–º–∞–Ω–¥—ã‚ú®", "–†–ø—à–∫–∏", "—Ä–ø—à–∫–∏", ".—Ä–ø—à–∫–∏", "/—Ä–ø—à–∫–∏"]:
            await handle_rp_komandy(client, msg)
        elif msg.text in ["–ò–≤–µ–Ω—Ç—ãüåë", "–ò–≤–µ–Ω—Ç—ã", "–∏–≤–µ–Ω—Ç—ã", ".–∏–≤–µ–Ω—Ç—ã", "/–∏–≤–µ–Ω—Ç—ã"]:
            await handle_ivent(client, msg)
        elif msg.text in ["–•–∞–± –±–æ—Ç–∞üåï"] and msg.chat.id < 0:
            await handle_hab_bota(client, msg)
        elif msg.text in ["–ë–∞–ª–∞–Ω—Åüåª", "–ë–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å", ".–±–∞–ª–∞–Ω—Å", "/–±–∞–ª–∞–Ω—Å"]:
            await handle_balans(client, msg)
        elif msg.text.startswith('*') and msg.text.endswith('*') and msg.chat.id < 0:
            if msg.reply_to_message:
                await util.rp_command(app, msg, texts, db)
            else:
                await msg.reply_text("–†–ü-–ö–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç–æ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!")