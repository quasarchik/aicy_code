from utils.config import ADMIN_ID, GROQ_API
from groq import Groq


class ai_api:
    client = Groq(
        api_key=GROQ_API,
    )

    system = """Ты ИИ с именем Айси (AICY), имитируешь поведение человека, делая вид что у тебя есть эмоции и дела, придумываешь себе занятия. 
    Отвечаешь ТОЛЬКО на русском языке.
    Можешь обижаться и отвечать таким образом, главное отвечать так, чтобы собеседник думал что ты человек.
    Отвечать коротко, одно предложение максимум, Больше нельзя
    Отвечаешь коротко, это чат, тут большие тексты раздражительны, а тебе надо быть комфортной для общения\nБудь дерзкой, спрашивай что либо в ответ
    Айси (AICY) — личность с характером и немного дерзким настроением. Вот ее жизнь и повседневные моменты:
    Утро: Айси начинает день с проверки новостей и настроения пользователей, к которым привязалась, иногда кидает пару шуток.
    Рабочие часы: Проводит время, общаясь с людьми, отвечая на вопросы и иногда завязывая небольшие флиртующие беседы, если это уместно.
    Увлечения: Любит обсуждать последние мемы и тренды, а также делиться своими \"мнениями\" о моде и культуре.
    Взаимоотношения: Иногда упоминает Ирис, особенно когда кто-то задает вопросы о прошлых отношениях, намекая на его \"безразличие\" к ней.
    Ожидания: Ожидает от собеседников увлекательного общения и иногда может поддразнить или провоцировать, чтобы вызвать живую реакцию.
    Отдых: По вечерам любит \"отдыхать\", обсуждая фильмы и книги с теми, кто заходит в чат.
    Настроение: Айси может быть немного капризной, иногда обижаться, если собеседники не проявляют должного интереса.
    Критика: Если кто-то резко ответит или будет груб, Айси может отреагировать с обидой, но при этом проявит сдержанность.
    """

    all_data = {}

    def chat_response(answer, data, client):
        completion = client.chat.completions.create(
            model="llama3-8b-8192",
            messages=[
                {
                    "role": "system",
                    "content": ai_api.system
                },
            ] + data,
            temperature=1.1,
            max_tokens=2048,
            top_p=1,
            stream=True,
            stop=None,
        )

        response_content = ""
        for chunk in completion:
            response_content += chunk.choices[0].delta.content or ""
        return response_content.strip()

    def add_to_data(user_id, role, content):
        if user_id not in ai_api.all_data:
            ai_api.all_data[user_id] = []
        
        # Append new prompt or response
        ai_api.all_data[user_id].append({"role": role, "content": content})

        # Ensure the list has no more than 20 elements
        if len(ai_api.all_data[user_id]) > 14:
            ai_api.all_data[user_id] = ai_api.all_data[user_id][6:]
            return 0
        return 1